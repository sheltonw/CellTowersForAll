# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# Cell_Python.py
# Created on: 2016-11-08 15:11:49.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
import os
from arcpy.sa import *
from arcpy import env
#env.workspace = "D:\Spencer\Current Classes\514\Cell Tower\Counties"
# Check out any necessary licenses
arcpy.CheckOutExtension("spatial")

# Local variables:
utah_ned30 = arcpy.GetParameterAsText(0)
Cellular_Towers = arcpy.GetParameterAsText(1)
counties = arcpy.GetParameterAsText (2)
counties_name = arcpy.GetParameterAsText(3)
UDOTRoutes_LRS = arcpy.GetParameterAsText(4)
Geodatabase = arcpy.GetParameterAsText(5)
Output_Coordinate_System = arcpy.GetParameterAsText(6)
cellsize_option = arcpy.GetParameterAsText(7)
BufferZone= arcpy.GetParameterAsText (8)
BufferRoads = arcpy.GetParameterAsText (9)
template_layer = arcpy.GetParameterAsText(10)
raster_symbology = arcpy.GetParameterAsText(11)
output_folder = arcpy.GetParameterAsText(12)
All_Utah = arcpy.GetParameterAsText (13)


# Environment Settings

arcpy.env.outputCoordinateSystem = Output_Coordinate_System
arcpy.env.overwriteOutput = True
arcpy.env.workspace = Geodatabase
arcpy.env.cellSize = cellsize_option 


# Global variables:
layer_counties = arcpy.mapping.Layer(counties)
new_county = "County_Boundary"
county_names = [] # We will find this empty list
rows = arcpy.SearchCursor(layer_counties,"", "", counties_name, counties_name + " A")
County_Buffer = 'County_Buffer'
Cellular_Projected_Clip = 'Cellular_Projected_Clip'
Suitable_Slope = 'Suitable_Slope'
ClipRaster = 'ClipRaster'
UDOT_LRS_Buffer = 'UDOT_LRS_Buffer'
Final_Cite_Clip = 'Final_Cite_Clip'
ClipRouts = "ClipRouts"
counter = 1

def Roadbuffer (BufferRoads):
	# Make a list of Road Buffer Size values and make sure the values are integers.
	Roads_Buffer = BufferRoads.split(";")
	RoadsBuffer = [float(x) for x in Roads_Buffer]
	MetersBuffer = [x*1609.34 for x in RoadsBuffer] #Convert miles to meters
	arcpy.AddMessage (MetersBuffer)
	total_buffers = len(MetersBuffer)
	arcpy.AddMessage (total_buffers)
	return total_buffers

def pdf_create (output_folder):
	arcpy.AddMessage('Step 1: Setting up for the Loop')
	## Specify path to where you will save the PDF
	arcpy.AddMessage('-pdf_path =' + output_folder + '\\AtlasCounties.pdf')
	pdf_path = output_folder + "\\AtlasCounties.pdf"
	## if an atlas already exists, remove it
	arcpy.AddMessage('-Creating New Atlas')
	if os.path.exists(pdf_path):
		os.remove(pdf_path)
	##Create the atlas PDF file
	pdf_doc = arcpy.mapping.PDFDocumentCreate(pdf_path)
	arcpy.AddMessage('-Specify the Current map Document and Data Frame')
	mxd = arcpy.mapping.MapDocument ("CURRENT")
	cdf = arcpy.mapping.ListDataFrames(mxd, "County Map")[0]

def get_county_names (county_names):
	for row in rows:
		county_names.append(getattr(row, counties_name))
	# Count the number of counties in row for how many maps we need to create
	total_counties = len(county_names)
	return total_counties

def Kern (Cellular_Towers,All_Utah,cellsize_option):
	#Calculate Kernel Density For Whole State
	arcpy.AddMessage('-Clip Tool Running')
	arcpy.Clip_analysis(Cellular_Towers, All_Utah , Cellular_Projected_Clip, '')
	##kernel Density tool with Cellular_Projected_Clip
	## (input Feature, Population Field, Output Cell Size [0],
	## Search Radius [0], Area Units [0])
	arcpy.AddMessage('-Kernal Density Tool Running')
	Kernel_DEM = KernelDensity(Cellular_Projected_Clip, 'NONE', cellsize_option, '5000', 'SQUARE_KILOMETERS')

def SUITSLP(utah_ned30, counties, ClipRaster):
	#Slope and Raster Calculator
	arcpy.AddMessage('Part 2; Slope and Raster Calculator')
	arcpy.Clip_management(utah_ned30, "-12707444.595 4413664.347 -12118745.5 5171035.653", ClipRaster, counties, "0", "ClippingGeometry", "NO_MAINTAIN_EXTENT")
	## Slope of County Raster
	## (Input Raster, Output Measurement [0], Z Factor [0])
	arcpy.AddMessage('-Slope Tool Running')
	Slope_DEM = Slope(ClipRaster, 'DEGREE', '1')
	## Raster Calculator for Slope_DEM
	## (Map Algebra Expression)
	arcpy.AddMessage('-Calculating Appropriate Slope')
	Suitable_Slope = LessThan(Slope_DEM, 15)



		
def MapCreation (counter, buffdist):
		## Note the '[0]' represents that the input to the tool is optional
		# Part 1
		# Select, Buffer, Clip, Kernel Density, and Raster Calculator
		arcpy.AddMessage ('Part 1: Select, Buffer, Clip, Kernel Density, and Raster Calculator')
		## Select County Polygons
		## (Input, Output, SQL Statement)
		arcpy.AddMessage('-Select(County) Tool Running')
		arcpy.Select_analysis(layer_counties, new_county, '"' + counties_name + "\" = '" + county_names[i] + "'")
		
		## Buffer County Polygons## (Input Feature, Output Feature,  Distance: Linear Unit, Side Type [0]
		## End Type [0], Dissolve Type [0], Dissolve Fields [0])
		arcpy.AddMessage ('-County Buffer Tool Running')
		arcpy.Buffer_analysis (new_county, County_Buffer, BufferZone, 'FULL', 'ROUND', 'ALL','')
		## Clip Cell Tower With County Buffer:
		## (Input Features, Clip Features, Output Feature Class, XY Tolerance [0])
		
		## Raster Calculator for Kernal Density:
		## (Map Algebra Expression)
		arcpy.AddMessage('-Calculating Appropriate Tower Density')
		TowerDensityDEM= LessThan (Kernel_DEM * 1000000, 1)
		
		# part 2
		# Buffer, Extract, by Mask, and Raster Calculator
		arcpy.AddMessage ('Part 3: Buffer, Extract by Mask, and Raster Calculator')
		## Buffer Highways Shapefile
		
		## End Type [0], Dissolve Type [0], Dissolve Fields [0])
		arcpy.AddMessage ('-buffer (' + str(UDOTRoutes_LRS) + ') Tool Running')
		arcpy.Clip_analysis (UDOTRoutes_LRS, new_county, ClipRouts)
		arcpy.Buffer_analysis(ClipRouts, UDOT_LRS_Buffer, buffdist, 'FULL', 'ROUND', 'ALL', '')
		## Extract by Mask UDOTRoutes_LRS with SuitableSlope
		## (Input Raster, Feature Mask Data)
		arcpy.AddMessage('-Extract by Mask Tool Running')
		SuitableSlopebyRoads = ExtractByMask(Suitable_Slope, UDOT_LRS_Buffer)
		## Raster Calculator for SuitableSlopebyRoads and TowerDensityDEM
		arcpy.AddMessage ('-Calculating Suitable Cell Tower Sites')
		
		Final_Suitability_Sites = SuitableSlopebyRoads * TowerDensityDEM
		Final_Suitability_Sites.save('Final_Suitability_Sites1')
		## Adding Final_Suitability_Sites to Map
		arcpy.AddMessage('-Adding Final_Suitability_Sites to Map as Layer')
		mxd = arcpy.mapping.MapDocument ('CURRENT')
		df = arcpy.mapping.ListDataFrames(mxd, "County Map")[0] #Main data frame
		arcpy.MakeRasterLayer_management('Final_Suitability_Sites1','Final_Suitability_Sites')
		newlayer = arcpy.mapping.Layer('Final_Suitability_Sites')
		arcpy.ApplySymbologyFromLayer_management(newlayer, raster_symbology)
		arcpy.mapping.AddLayer (df, newlayer, 'TOP')
		arcpy.RefreshActiveView()
		mxd.save
		
		
		# Step 2: Creating the Atlas maps
		arcpy.AddMessage('Step 2: Creating the Atlas Maps')
		arcpy.AddMessage("-Current iteration = " + str(counter) + "of" + str(total_counties*total_buffers))
		arcpy.AddMessage("-Current counties = " + county_names[i].capitalize())
		#Check for and delete any previous county file
		
		pdf_county = str(output_folder + "\\" + county_names[i].capitalize() + "_" + str(buffdist/1609.34) + ".pdf")
		if os.path.exists(pdf_county):
			os.remove(pdf_county)
		#Select the current county
		arcpy.AddMessage('--Selecting ' + county_names[i].capitalize())
		arcpy.Select_analysis(layer_counties, new_county, '"' + counties_name + "\" = '" + county_names[i] + "'")
		layer_new_county = arcpy.mapping.Layer(new_county)
		#Adding Layer to Map
		arcpy.AddMessage('--Adding Layer to Map')
		arcpy.mapping.AddLayer(cdf, layer_new_county, "TOP")
		arcpy.RefreshActiveView()
		# *Editing Title and Page Number
		arcpy.AddMessage('--*Editing Title and Page Number')
		for elem in arcpy.mapping.ListLayoutElements(mxd, "TEXT_ELEMENT"):
			if elem.text == "<FNT size='36'>TITLE</FNT>": 
				elem.text = "<FNT size='36'>" + county_names[i] + " County " + str(buffdist/1609.34) + " " + "Mile Buffer</FNT>"
			if elem.text == "<FNT size='30'>PAGE</FNT>":
				elem.text = "<FNT size='30'>" + str(counter) + " of " + str(total_counties * total_buffers) + "</FNT>"
		arcpy.RefreshActiveView()
		# Zoom to the new layer in the active frame
		arcpy.AddMessage('--Zoom to Layer')
		arcpy.SelectLayerByAttribute_management(new_county, "NEW_SELECTION")
		cdf.zoomToSelectedFeatures()
		arcpy.SelectLayerByAttribute_management(new_county, "CLEAR_SELECTION")
		arcpy.RefreshActiveView()
		# Apply common symbology from a layer
		arcpy.AddMessage('--changing Symbology of Layer')
		arcpy.ApplySymbologyFromLayer_management(new_county, template_layer)
		arcpy.SelectLayerByAttribute_management(new_county, "CLEAR_SELECTION")
		arcpy.SelectLayerByAttribute_management(template_layer, "CLEAR_SELECTION")
		arcpy.SelectLayerByAttribute_management(layer_counties, "CLEAR_SELECTION")	
		arcpy.RefreshActiveView()
		# Give ArcMap a little time to process
		for j in range(500):
			pass
		# Export map to PDF
		arcpy.AddMessage('--Export Map to PDF and Append to Atlas')
		arcpy.mapping.ExportToPDF(mxd,pdf_county)
		# Add county map to atlas
		pdf_doc.appendPages(pdf_county)
		# Reset Title and Page Number
		arcpy.AddMessage('Reset Title and Page Number')
		for elem in arcpy.mapping.ListLayoutElements(mxd, "TEXT_ELEMENT"):
			if elem.text == "<FNT size='36'>" + county_names[i] + " County " + str(buffdist/1609.34) + " " + "Mile Buffer</FNT>":
				elem.text = "<FNT size='36'>TITLE</FNT>"
			if elem.text == "<FNT size='30'>" +str(counter) + " of " + str(total_counties * total_buffers) + "</FNT>":
				elem.text = "<FNT size='30'>PAGE</FNT>"
		# Remove intermediate layers and refresh
		arcpy.AddMessage('--Remove intermediate layers and refresh')
		arcpy.mapping.RemoveLayer(cdf, layer_new_county)
		arcpy.Delete_management(new_county)
		arcpy.RefreshActiveView()
		
		
		
		
Roadbuffer (BufferRoads)
pdf_create (output_folder)
get_county_names (county_names)
Kern (Cellular_Towers,All_Utah,cellsize_option)
SUITSLP (utah_ned30, counties, ClipRaster)
for i in range (0, total_counties):
	for buffdist in MetersBuffer:
		MapCreation (counter, buffdist)
		counter = counter + 1
		
		
# end of Loop
# Save PDF and Close
arcpy.AddMessage('End of Loop')
arcpy.AddMessage('Saving and Closing')
pdf_doc.saveAndClose()
pdf_doc = arcpy.mapping.PDFDocumentOpen(pdf_path)






